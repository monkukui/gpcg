package main

import (
	"flag"
	"gpcg"
	"log"
  "os"
  "fmt"

  "io/ioutil"
)

func main() {
	mainFilePath := flag.String("main", "", "main file path")
	libDirPath := flag.String("lib", "", "lib dir path")
  genFilePath := flag.String("gen", "", "gen file path")

	flag.Parse()

	if *mainFilePath == "" || *libDirPath == "" || *genFilePath == "" {
		log.Print("Usage: ./gpt -main <main_file_path> -lib <library_dir_path> -gen <gen_file_path>")
		return
	}

  // 自動生成
  err := gpcg.Generate(*mainFilePath, *libDirPath, *genFilePath)
  if err != nil {
    log.Print(err)
  }

  // オリジナルコードをコメントアウトして書き込み
  // generatedFile, err := os.Create(*genFilePath)
  generatedFile, err := os.OpenFile(*genFilePath, os.O_WRONLY|os.O_APPEND, 0666)
  defer generatedFile.Close()
  if err != nil {
    log.Print(err)
  }
  fmt.Fprintln(generatedFile, "/* this code was generated by the code below")
  // generatedFile.Write(([]byte)("/* this code was generated by the code below"))

  originalFile, err := os.Open(*mainFilePath)
  defer originalFile.Close()
  if err != nil {
    log.Print(err)
  }
  originalCode, err := ioutil.ReadAll(originalFile)
  if err != nil {
    log.Print(err)
  }
  // generatedFile.Write(originalCode)
  fmt.Fprintln(generatedFile, string(originalCode))
  // generatedFile.Write(([]byte)("*/"))
  fmt.Fprintln(generatedFile, "*/")
}
